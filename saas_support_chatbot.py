# -*- coding: utf-8 -*-
"""SaaS_Support_Chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11T-KURapqjJ5wisR-4nGHNUdz-VHtAmR

Installing dependencies. In colab, we can install using shell commands. Installing transformer from HF, pandas and Gradio, etc.
"""

!pip install -q transformers torch gradio pandas

!pip install gdown

"""The model and tokenizer must be properly initialized before we use the get_answer function otherwise it the UI will not show answers generated by the model because model has not generated any output yet."""

from transformers import T5Tokenizer, T5ForConditionalGeneration

# Initialize the tokenizer and model
tokenizer = T5Tokenizer.from_pretrained("google/flan-t5-base")
model = T5ForConditionalGeneration.from_pretrained("google/flan-t5-base").to("cuda")

"""Loading the FAQs csv from Google drive into a Python dictionary"""

import gdown
import pandas as pd

# Download the CSV file using gdown
file_id = "1O4CWfDo9h7MDK5KH5fktJeSTleoew6OY"  #  file ID from google drive
gdown.download(f'https://drive.google.com/uc?id={file_id}', 'faqs.csv', quiet=False)


"""
Tried downloading directly from drive, did not work properly. Could have also used upload feature in Colab.
import pandas as pd

# Load FAQs from Google Drive.
data_url = "https://drive.google.com/uc?export=download&id=1O4CWfDo9h7MDK5KH5fktJeSTleoew6OY"
"""


#creating dataframe
df = pd.read_csv(data_url)

#Converting df to dictionary for easy retrival of Que/Ans instead of using index of dataframe.
faqs = df.to_dict(orient='records')  # Convert to dictionary
print("Loaded FAQs:", faqs)

"""Chat bot logic :
Retrieves an answer from FAQs dataset based on user input. using Google Flan-T5 model to refine the answer. Flan-T5 is a powerful transformer-based language model.
"""

def get_answer(question):
    # Finding the closest FAQ question using User input query
    closest_faq = None
    for faq in faqs:
        if question.lower() in faq["Question"].lower():
            closest_faq = faq
            break

    # If query does not match, return a default response
    if not closest_faq:
        return "Please contact support for further assistance. Thanks!"

    # Using Google Flan-T5 model to refine the answer.
    #Creating Prompt string for the model to process.
    #{closest_faq["Answer"]} fetch only answer from FAQs as each FAQ entry contains fields "Question," "Answer," and "Category".
    #By including 'Answer' from the FAQ,it guide the model to produce a response that is informed by existing information(context).
    prompt = f"""
    Question: {question}
    Answer this question using ONLY the context below:
    Context: {closest_faq["Answer"]}
    """

    #prompt string is tokenized using a HF tokenizer
    inputs = tokenizer(prompt, return_tensors="pt").to("cuda")

    #Flan-T5 model generates an answer based on the inputs, with a maximum length of 200 tokens.
    #The Flan-T5 model processes the tokenized inputs and generates an answer.
    outputs = model.generate(**inputs, max_length=200)

    #Generated output is decoded back into human-readable text using the tokenizer, removing any special tokens.
    answer = tokenizer.decode(outputs[0], skip_special_tokens=True)

    # Include the category in the response
    return f"CATEGORY :\n {closest_faq['Category']}\nANSWER :\n {answer}"

"""Using closest_faq["Answer"] in the context provides relevant, structured information that enhances the quality of responses generated by the Flan-T5 model. It ensures that answers are based on verified content rather than relying solely on general knowledge, which is vital for applications like customer support.Cobining language processing to deliver precise and contextually appropriate answers.

Building simple UI using Gardio
"""

import gradio as gr

# Simple chat interface
demo = gr.Interface(
    fn=get_answer,
    inputs=gr.Textbox(label="Ask a question"),
    outputs=gr.Textbox(label="Answer"),
    title="SaaS Support Chatbot",
    examples=["How do I cancel my subscription?", "I forgot my password"]
)

# Launchin UI in Colab
demo.launch(share=True)  # Generates a public link like

